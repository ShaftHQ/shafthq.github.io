"use strict";(self.webpackChunkshaft_user_guide=self.webpackChunkshaft_user_guide||[]).push([[9097],{3411:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"Keywords/API/Response_Validations","title":"Response Validations","description":"SHAFT API Response Validations","source":"@site/docs/Keywords/API/Response_Validations.md","sourceDirName":"Keywords/API","slug":"/Keywords/API/Response_Validations","permalink":"/docs/Keywords/API/Response_Validations","draft":false,"unlisted":false,"editUrl":"https://github.com/ShaftHQ/shafthq.github.io/blob/master/docs/Keywords/API/Response_Validations.md","tags":[],"version":"current","frontMatter":{"id":"Response_Validations","title":"Response Validations","sidebar_label":"Validations"},"sidebar":"docs","previous":{"title":"Parsing","permalink":"/docs/Keywords/API/Response_Getters"},"next":{"title":"Overview","permalink":"/docs/Keywords/Validations/Overview"}}');var a=s(4848),o=s(8453);const i={id:"Response_Validations",title:"Response Validations",sidebar_label:"Validations"},r=void 0,l={},d=[{value:"SHAFT API Response Validations",id:"shaft-api-response-validations",level:2},{value:"Body",id:"body",level:3},{value:"Usage",id:"usage",level:4},{value:"Extracted Json Value",id:"extracted-json-value",level:3},{value:"Usage",id:"usage-1",level:4},{value:"Extracted Json Value As List",id:"extracted-json-value-as-list",level:3},{value:"Usage",id:"usage-2",level:4},{value:"Time",id:"time",level:3},{value:"Usage",id:"usage-3",level:4},{value:"Is Equal To File Content",id:"is-equal-to-file-content",level:3},{value:"Does Not Equal File Content",id:"does-not-equal-file-content",level:3},{value:"Is Equal To File Content Ignoring Order",id:"is-equal-to-file-content-ignoring-order",level:3},{value:"Does Not Equal File Content Ignoring Order",id:"does-not-equal-file-content-ignoring-order",level:3},{value:"Contains File Content",id:"contains-file-content",level:3},{value:"Does not Contain File Content",id:"does-not-contain-file-content",level:3},{value:"Matches Schema",id:"matches-schema",level:3},{value:"Does Not Match Schema",id:"does-not-match-schema",level:3}];function c(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"shaft-api-response-validations",children:"SHAFT API Response Validations"}),"\n",(0,a.jsxs)(t.p,{children:["Using the SHAFT API object to directly validate on the latest response directly is very convenient, let's see! ",(0,a.jsx)("br",{}),"\nWe need to use the SHAFT API Object then use the ",(0,a.jsx)(t.strong,{children:"assertThatResponse()"})," method (for hard assertion) or ",(0,a.jsx)(t.strong,{children:"verifyThatResponse()"})," method (for soft assertion) to access all the response validation methods, and ofcourse we need to add the ",(0,a.jsx)(t.strong,{children:"perform();"})," in the end to perform the validation correctly. ",(0,a.jsx)("br",{}),(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(t.h3,{id:"body",children:"Body"}),"\n",(0,a.jsxs)(t.p,{children:["Validate on the response body ",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(t.em,{children:["* Calls the ",(0,a.jsx)(t.a,{href:"https://shafthq.github.io/docs/Keywords/Validations/Objects",children:"Object validation methods"})," to contiue building your validation. *"]})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'api.assertThatResponse().body().contains("data").perform();\n'})}),"\n",(0,a.jsx)(t.h4,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'SHAFT.API api = new SHAFT.API("http://api.zippopotam.us/");\napi.get("us/90210").perform();\napi.assertThatResponse().body().contains("Beverly Hills").perform();\n'})}),"\n",(0,a.jsx)(t.h3,{id:"extracted-json-value",children:"Extracted Json Value"}),"\n",(0,a.jsxs)(t.p,{children:["Validate on an extracted value from the response body by parsing the target ",(0,a.jsx)(t.strong,{children:"JSONPath."})," ",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(t.em,{children:["* To extract the desired value, please refer to these urls for examples: ",(0,a.jsx)("br",{}),"\nYou can learn the JSONPath Syntax from ",(0,a.jsx)(t.a,{href:"https://support.smartbear.com/alertsite/docs/monitors/api/endpoint/jsonpath.html",children:"here"})," ",(0,a.jsx)("br",{}),"\nAnd test your JSONPath ",(0,a.jsx)(t.a,{href:"http://jsonpath.com/",children:"here"})," *"]}),"  ",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(t.em,{children:["* Calls the ",(0,a.jsx)(t.a,{href:"https://shafthq.github.io/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/Objects",children:"Object validation methods"})," to contiue building your validation. *"]})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'api.assertThatResponse().extractedJsonValue("jsonPath").isEqualTo("data").perform();\n'})}),"\n",(0,a.jsx)(t.h4,{id:"usage-1",children:"Usage"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'SHAFT.API api = new SHAFT.API("https://jsonplaceholder.typicode.com");\napi.get("/users").perform();\napi.assertThatResponse().extractedJsonValue("$[?(@.name==\'Chelsey Dietrich\')].id").isEqualTo("5").perform();\n'})}),"\n",(0,a.jsx)(t.h3,{id:"extracted-json-value-as-list",children:"Extracted Json Value As List"}),"\n",(0,a.jsxs)(t.p,{children:["Validate on an extracted value from the response body by parsing the target ",(0,a.jsx)(t.strong,{children:"JSONPath"})," as list and check every item against it ",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(t.em,{children:["* To extract the desired value, please refer to these urls for examples: ",(0,a.jsx)("br",{}),"\nYou can learn the JSONPath Syntax from ",(0,a.jsx)(t.a,{href:"https://support.smartbear.com/alertsite/docs/monitors/api/endpoint/jsonpath.html",children:"here"})," ",(0,a.jsx)("br",{}),"\nAnd test your JSONPath ",(0,a.jsx)(t.a,{href:"http://jsonpath.com/",children:"here"})," *"]}),"  ",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(t.em,{children:["* Calls the ",(0,a.jsx)(t.a,{href:"https://shafthq.github.io/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/Objects",children:"Object validation methods"})," to contiue building your validation. *"]})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'api.assertThatResponse().extractedJsonValueAsList("jsonPath").isEqualTo("data").perform();\n'})}),"\n",(0,a.jsx)(t.h4,{id:"usage-2",children:"Usage"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'SHAFT.API api = new SHAFT.API("https://jsonplaceholder.typicode.com");\napi.get("/todos").perform();\napi.verifyThatResponse().extractedJsonValueAsList("$[?(@.completed==true)].completed").isEqualTo("true").perform();\n'})}),"\n",(0,a.jsx)(t.h3,{id:"time",children:"Time"}),"\n",(0,a.jsxs)(t.p,{children:["Validate on the response time. ",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(t.em,{children:["* Calls the ",(0,a.jsx)(t.a,{href:"https://shafthq.github.io/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/Nums",children:"Number validation methods"})," to contiue building your validation. *"]})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"api.assertThatResponse().time().isEqualTo(expectedNumberValue).perform();\n"})}),"\n",(0,a.jsx)(t.h4,{id:"usage-3",children:"Usage"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'SHAFT.API api = new SHAFT.API("http://api.zippopotam.us/");\napi.get("us/90210").perform();\napi.verifyThatResponse().isGreaterThanOrEquals(1.1).perform();\napi.verifyThatResponse().isLessThanOrEquals(100000).perform();\n'})}),"\n",(0,a.jsx)(t.h3,{id:"is-equal-to-file-content",children:"Is Equal To File Content"}),"\n",(0,a.jsx)(t.p,{children:"Validate if the content of the provided actual response object is equal to the expected file content."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'api.assertThatResponse().isEqualToFileContent("fileRelativePath").perform();\n'})}),"\n",(0,a.jsx)(t.h3,{id:"does-not-equal-file-content",children:"Does Not Equal File Content"}),"\n",(0,a.jsx)(t.p,{children:"Validate if the content of the provided actual response object is not equal to the expected file content."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'api.assertThatResponse().doesNotEqualFileContent("fileRelativePath").perform();\n'})}),"\n",(0,a.jsx)(t.h3,{id:"is-equal-to-file-content-ignoring-order",children:"Is Equal To File Content Ignoring Order"}),"\n",(0,a.jsx)(t.p,{children:"Validate if the content of the provided actual response object is equal to the expected file content while ignoring Order of the json objects."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'api.assertThatResponse().isEqualToFileContentIgnoringOrder("fileRelativePath").perform();\n'})}),"\n",(0,a.jsx)(t.h3,{id:"does-not-equal-file-content-ignoring-order",children:"Does Not Equal File Content Ignoring Order"}),"\n",(0,a.jsx)(t.p,{children:"Validate if the content of the provided actual response object is not equal to the expected file content while ignoring Order of the json objects."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'api.assertThatResponse().doesNotEqualFileContentIgnoringOrder("fileRelativePath").perform();\n'})}),"\n",(0,a.jsx)(t.h3,{id:"contains-file-content",children:"Contains File Content"}),"\n",(0,a.jsx)(t.p,{children:"Validate if the content of the provided actual response object contains the expected file content."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'api.assertThatResponse().containsFileContent("fileRelativePath").perform();\n'})}),"\n",(0,a.jsx)(t.h3,{id:"does-not-contain-file-content",children:"Does not Contain File Content"}),"\n",(0,a.jsx)(t.p,{children:"Validate if the content of the provided actual response object does not contains the expected file content."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'api.assertThatResponse().doesNotContainFileContent("fileRelativePath").perform();\n'})}),"\n",(0,a.jsx)(t.h3,{id:"matches-schema",children:"Matches Schema"}),"\n",(0,a.jsx)(t.p,{children:"Validate if the content of the provided actual response object matches the schema for the expected file content."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'api.assertThatResponse().matchesSchema("fileRelativePath").perform();\n'})}),"\n",(0,a.jsx)(t.h3,{id:"does-not-match-schema",children:"Does Not Match Schema"}),"\n",(0,a.jsx)(t.p,{children:"Validate if the content of the provided actual response object does not match the schema for the expected file content."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'api.assertThatResponse().doesNotMatchSchema("fileRelativePath").perform();\n'})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>r});var n=s(6540);const a={},o=n.createContext(a);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);