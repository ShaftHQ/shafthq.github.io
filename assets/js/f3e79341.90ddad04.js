"use strict";(self.webpackChunkshaft_user_guide=self.webpackChunkshaft_user_guide||[]).push([[1551],{58:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"Keywords/Validations/Elements","title":"Element","description":"We can make many assertions and verifications on web elements by using the Class WebDriverElementValidationsBuilder through using the following methods:","source":"@site/docs/Keywords/Validations/Elements.md","sourceDirName":"Keywords/Validations","slug":"/Keywords/Validations/Elements","permalink":"/docs/Keywords/Validations/Elements","draft":false,"unlisted":false,"editUrl":"https://github.com/ShaftHQ/shafthq.github.io/blob/master/docs/Keywords/Validations/Elements.md","tags":[],"version":"current","frontMatter":{"id":"Elements","title":"Element","sidebar_labe":"Element"},"sidebar":"docs","previous":{"title":"Browser","permalink":"/docs/Keywords/Validations/Browser"},"next":{"title":"API","permalink":"/docs/Keywords/Validations/Response"}}');var s=t(4848),a=t(8453);const l={id:"Elements",title:"Element",sidebar_labe:"Element"},r=void 0,o={},d=[{value:"We can make many assertions and verifications on web elements by using the <em>Class WebDriverElementValidationsBuilder</em> through using the following methods:",id:"we-can-make-many-assertions-and-verifications-on-web-elements-by-using-the-class-webdriverelementvalidationsbuilder-through-using-the-following-methods",level:4},{value:"exists():",id:"exists",level:3},{value:"doesNotExist():",id:"doesnotexist",level:3},{value:"matchesReferenceImage():",id:"matchesreferenceimage",level:3},{value:"doesNotMatchReferenceImage():",id:"doesnotmatchreferenceimage",level:3},{value:"attribute():",id:"attribute",level:3},{value:"isSelected():",id:"isselected",level:3},{value:"isChecked():",id:"ischecked",level:3},{value:"isVisible():",id:"isvisible",level:3},{value:"isEnabled():",id:"isenabled",level:3},{value:"isNotSelected():",id:"isnotselected",level:3},{value:"isNotChecked():",id:"isnotchecked",level:3},{value:"isHidden():",id:"ishidden",level:3},{value:"isDisabled():",id:"isdisabled",level:3},{value:"text():",id:"text",level:3},{value:"textTrimmed():",id:"texttrimmed",level:3}];function c(e){const i={code:"code",em:"em",h3:"h3",h4:"h4",li:"li",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(i.h4,{id:"we-can-make-many-assertions-and-verifications-on-web-elements-by-using-the-class-webdriverelementvalidationsbuilder-through-using-the-following-methods",children:["We can make many assertions and verifications on web elements by using the ",(0,s.jsx)(i.em,{children:"Class WebDriverElementValidationsBuilder"})," through using the following methods:"]}),"\n",(0,s.jsx)(i.h3,{id:"exists",children:"exists():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check that the target element exists."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).exists().perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).exists().perform();\n    }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"doesnotexist",children:"doesNotExist():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check that the target element does not exist."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).doesNotExist().perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).doesNotExist().perform();\n    }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"matchesreferenceimage",children:"matchesReferenceImage():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check that the target element matches a reference image (using the Artificial Intelligence library OpenCV). On the first test run this method will take a screenshot of the target element and the test will pass, and on following runs the element will be compared against that reference image. The reference images are stored under src/test/resources/DynamicObjectRepository for later maintenance. This method returns."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).matchesReferenceImage().perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).matchesReferenceImage().perform();\n    }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"doesnotmatchreferenceimage",children:"doesNotMatchReferenceImage():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check that the target element does not match a reference image (using the Artificial Intelligence library OpenCV). On the first test run this method will take a screenshot of the target element and the test will pass, and on following runs the element will be compared against that reference image. The reference images are stored under src/test/resources/DynamicObjectRepository for later maintenance."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).doesNotMatchReferenceImage().perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).doesNotMatchReferenceImage().perform();\n    }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"attribute",children:"attribute():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check against a certain element attribute if it is isEqualTo, Contians, equals, doesNotEqual, doesNotContain, isTrue, isFalse, ..."}),"\n",(0,s.jsx)(i.li,{children:"Needed parameters: elementAttribute - the target element attribute that will be checked against."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a NativeValidationsBuilder object to continue building your validation."}),"\n",(0,s.jsxs)(i.li,{children:["Note that we can make other validations upon the attribute like:\n",(0,s.jsx)(i.em,{children:"isTrue"})," , ",(0,s.jsx)(i.em,{children:"isFalse"}),", ",(0,s.jsx)(i.em,{children:"isEqualTo"}),", ",(0,s.jsx)(i.em,{children:"doseNotEqualTo"}),", ",(0,s.jsx)(i.em,{children:"equals"}),", ",(0,s.jsx)(i.em,{children:"contains"}),", ",(0,s.jsx)(i.em,{children:"doseNotContain"}),", ",(0,s.jsx)(i.em,{children:"isNull"}),", ",(0,s.jsx)(i.em,{children:"isNotNull"}),", etc."]}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).attribute(attributeName).perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).attribute(attributeName).perform();\n    }         \n}     \n"})}),"\n",(0,s.jsx)(i.h3,{id:"isselected",children:"isSelected():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check against the provided elements selected attribute"}),"\n",(0,s.jsx)(i.li,{children:"This method returns a NativeValidationsBuilder object to continue building your validation"}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isSelected().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isSelected().perform();\n        }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"ischecked",children:"isChecked():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check against the provided elements checked attribute."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a NativeValidationsBuilder object to continue building your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isChecked().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isChecked().perform();\n        }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"isvisible",children:"isVisible():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check against the provided elements hidden attribute."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a NativeValidationsBuilder object to continue building your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isVisible().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isVisible().perform();\n        }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"isenabled",children:"isEnabled():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check against the provided elements disabled attribute."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a NativeValidationsBuilder object to continue building your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isEnabled().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isEnabled().perform();\n        }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"isnotselected",children:"isNotSelected():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check against the provided elements selected attribute."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a NativeValidationsBuilder object to continue building your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isNotSelected().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isNotSelected().perform();\n    }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"isnotchecked",children:"isNotChecked():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check against the provided elements checked attribute."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a NativeValidationsBuilder object to continue building your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isNotChecked().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isNotChecked().perform();\n    }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"ishidden",children:"isHidden():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check against the provided elements hidden attribute."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a NativeValidationsBuilder object to continue building your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isHidden().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isHidden().perform();\n    }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"isdisabled",children:"isDisabled():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check against the provided elements disabled attribute."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a NativeValidationsBuilder object to continue building your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n            public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isDisabled().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isDisabled().perform();\n    }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"text",children:"text():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check against the provided elements text attribute."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a NativeValidationsBuilder object to continue building your validation."}),"\n",(0,s.jsxs)(i.li,{children:["Note that we can make other validations upon the attribute like:\n",(0,s.jsx)(i.em,{children:"isTrue"})," , ",(0,s.jsx)(i.em,{children:"isFalse"}),", ",(0,s.jsx)(i.em,{children:"isEqualTo"}),", ",(0,s.jsx)(i.em,{children:"doseNotEqualTo"}),", ",(0,s.jsx)(i.em,{children:"equals"}),", ",(0,s.jsx)(i.em,{children:"contains"}),", ",(0,s.jsx)(i.em,{children:"doseNotContain"}),", ",(0,s.jsx)(i.em,{children:"isNull"}),", ",(0,s.jsx)(i.em,{children:"isNotNull"}),", etc."]}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n            public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).text().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).text().perform();\n    }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"texttrimmed",children:"textTrimmed():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We Use this to check against the provided elements text attribute after it's trimmed (all leading and trailing space removed)."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a NativeValidationsBuilder object to continue building your validation."}),"\n",(0,s.jsxs)(i.li,{children:["Note that we can make other validations upon the attribute like:\n",(0,s.jsx)(i.em,{children:"isTrue"})," , ",(0,s.jsx)(i.em,{children:"isFalse"}),", ",(0,s.jsx)(i.em,{children:"isEqualTo"}),", ",(0,s.jsx)(i.em,{children:"doseNotEqualTo"}),", ",(0,s.jsx)(i.em,{children:"equals"}),", ",(0,s.jsx)(i.em,{children:"contains"}),", ",(0,s.jsx)(i.em,{children:"doseNotContain"}),", ",(0,s.jsx)(i.em,{children:"isNull"}),", ",(0,s.jsx)(i.em,{children:"isNotNull"}),", etc."]}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n            public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).textTrimmed().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).textTrimmed().perform();\n    }\n}\n"})})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>l,x:()=>r});var n=t(6540);const s={},a=n.createContext(s);function l(e){const i=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(a.Provider,{value:i},e.children)}}}]);