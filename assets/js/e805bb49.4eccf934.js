"use strict";(self.webpackChunkshaft_user_guide=self.webpackChunkshaft_user_guide||[]).push([[4272],{2655:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"Keywords/Validations/Files","title":"File","description":"We can make many assertions and verifications on files by using the Class FileValidationsBuilder through using the following methods:","source":"@site/docs/Keywords/Validations/Files.md","sourceDirName":"Keywords/Validations","slug":"/Keywords/Validations/Files","permalink":"/docs/Keywords/Validations/Files","draft":false,"unlisted":false,"editUrl":"https://github.com/ShaftHQ/shafthq.github.io/blob/master/docs/Keywords/Validations/Files.md","tags":[],"version":"current","frontMatter":{"id":"Files","title":"File","sidebar_labe":"File"},"sidebar":"docs","previous":{"title":"API","permalink":"/docs/Keywords/Validations/Response"},"next":{"title":"Object","permalink":"/docs/Keywords/Validations/Objects"}}');var s=t(4848),a=t(8453);const o={id:"Files",title:"File",sidebar_labe:"File"},l=void 0,r={},d=[{value:"We can make many assertions and verifications on files by using the <em>Class FileValidationsBuilder</em> through using the following methods:",id:"we-can-make-many-assertions-and-verifications-on-files-by-using-the-class-filevalidationsbuilder-through-using-the-following-methods",level:4},{value:"exists():",id:"exists",level:3},{value:"doesNotExist():",id:"doesnotexist",level:3},{value:"checksum():",id:"checksum",level:3},{value:"content():",id:"content",level:3}];function c(e){const i={code:"code",em:"em",h3:"h3",h4:"h4",li:"li",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(i.h4,{id:"we-can-make-many-assertions-and-verifications-on-files-by-using-the-class-filevalidationsbuilder-through-using-the-following-methods",children:["We can make many assertions and verifications on files by using the ",(0,s.jsx)(i.em,{children:"Class FileValidationsBuilder"})," through using the following methods:"]}),"\n",(0,s.jsx)(i.h3,{id:"exists",children:"exists():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check if a certain file exists."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().file(folderRelativePath, file name).exists().perform();\n        //make verification\n        Validations.verifyThat().file(folderRelativePath, file name).exists().perform();\n    }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"doesnotexist",children:"doesNotExist():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to check if a certain file does not exist."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().file(folderRelativePath, file name).doesNotExist().perform();\n        //make verification\n        Validations.verifyThat().file(folderRelativePath, file name).doesNotExist().perform();\n    }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"checksum",children:"checksum():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to calculate and check a certain file checksum to confirm if it has the exact same content or not."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a NativeValidationsBuilder object to continue building your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().file(folderRelativePath, file name).checksum().perform();\n        //make verification\n        Validations.verifyThat().file(folderRelativePath, file name).checksum().perform();\n    }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"content",children:"content():"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"We use this method to attempt to read and validate a certain file content (works for PDF and TEXT files)."}),"\n",(0,s.jsx)(i.li,{children:"This method returns a NativeValidationsBuilder object to continue building your validation."}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().file(folderRelativePath, file name).content().perform();\n        //make verification\n        Validations.verifyThat().file(folderRelativePath, file name).content().perform();\n    }\n}\n"})})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>l});var n=t(6540);const s={},a=n.createContext(s);function o(e){const i=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(a.Provider,{value:i},e.children)}}}]);