"use strict";(self.webpackChunkshaft_user_guide=self.webpackChunkshaft_user_guide||[]).push([[4235],{5201:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Keywords/GUI/Touch_Actions","title":"Touch Actions","description":"We can interact with Touch Actions via the following methods:","source":"@site/docs/Keywords/GUI/Touch_Actions.md","sourceDirName":"Keywords/GUI","slug":"/Keywords/GUI/Touch_Actions","permalink":"/docs/Keywords/GUI/Touch_Actions","draft":false,"unlisted":false,"editUrl":"https://github.com/ShaftHQ/shafthq.github.io/blob/master/docs/Keywords/GUI/Touch_Actions.md","tags":[],"version":"current","frontMatter":{"id":"Touch_Actions","title":"Touch Actions","sidebar_label":"Touch"},"sidebar":"docs","previous":{"title":"Element Validations","permalink":"/docs/Keywords/GUI/Element_Validations"},"next":{"title":"Native selenium WebDriver","permalink":"/docs/Keywords/GUI/didYouKnow/Native_selenium_Webdriver"}}');var o=t(4848),s=t(8453);const c={id:"Touch_Actions",title:"Touch Actions",sidebar_label:"Touch"},l=void 0,r={},a=[{value:"We can interact with Touch Actions via the following methods:",id:"we-can-interact-with-touch-actions-via-the-following-methods",level:4},{value:"performElementAction():",id:"performelementaction",level:3},{value:"nativeKeyboardKeyPress():",id:"nativekeyboardkeypress",level:3},{value:"hideNativeKeyboard():",id:"hidenativekeyboard",level:3},{value:"waitUntilElementIsVisible():",id:"waituntilelementisvisible",level:3},{value:"pinchToZoom():",id:"pinchtozoom",level:3},{value:"activateAppFromBackground():",id:"activateappfrombackground",level:3},{value:"tap methods:",id:"tap-methods",level:2},{value:"tap():",id:"tap",level:3},{value:"tap():",id:"tap-1",level:3},{value:"doubleTap():",id:"doubletap",level:3},{value:"longTap():",id:"longtap",level:3},{value:"swipe methods:",id:"swipe-methods",level:2},{value:"1. swipeToElement():",id:"1-swipetoelement",level:3},{value:"2. swipeByOffset():",id:"2-swipebyoffset",level:3},{value:"3. swipeElementIntoView():",id:"3-swipeelementintoview",level:3},{value:"4. swipeElementIntoView():",id:"4-swipeelementintoview",level:3},{value:"5. swipeElementIntoView():",id:"5-swipeelementintoview",level:3},{value:"6. swipeElementIntoView():",id:"6-swipeelementintoview",level:3},{value:"sendAppToBackground methods:",id:"sendapptobackground-methods",level:2},{value:"1. sendAppToBackground():",id:"1-sendapptobackground",level:3},{value:"2. sendAppToBackground():",id:"2-sendapptobackground",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h4,{id:"we-can-interact-with-touch-actions-via-the-following-methods",children:"We can interact with Touch Actions via the following methods:"}),"\n",(0,o.jsx)(n.h3,{id:"performelementaction",children:"performElementAction():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to call the Element Actions within the current Touch Actions instance. For example, in case of trying to tap a text box to type something. In that case we have to perform type(), an element action, within the tap(), the touch action."}),"\n",(0,o.jsx)(n.li,{children:"This method returns a WebDriverElementActions object."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n        new TouchActions(driver).touchMethod(element locator).performElementAction().touchMethod(element, String "");\n    }\n\n    @Test2\n    public void touchActions(){\n        driver.element().performTouchAction()\n                .tap(locator)\n                .performElementAction()\n                .type(locator, String "")\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"nativekeyboardkeypress",children:"nativeKeyboardKeyPress():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to send a keypress via the device soft keyboard."}),"\n",(0,o.jsx)(n.li,{children:"Needed parameters: key - the key that should be pressed."}),"\n",(0,o.jsx)(n.li,{children:"This method returns a self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n        new TouchActions(driver).touchMethod(element locator).nativeKeyboardKeyPress(KeyboardKeys key);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"hidenativekeyboard",children:"hideNativeKeyboard():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to hide the device native soft keyboard."}),"\n",(0,o.jsx)(n.li,{children:"This method returns a self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n        new TouchActions(driver).hideNativeKeyboard();\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"waituntilelementisvisible",children:"waitUntilElementIsVisible():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to wait until a specific element is now visible on the current screen."}),"\n",(0,o.jsx)(n.li,{children:"Needed parameters: elementReferenceScreenshot - relative path to the reference image from the local object repository."}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n         new TouchActions(driver).waitUntilElementIsVisible(String elementReferenceScreenshot);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"pinchtozoom",children:"pinchToZoom():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to  to zoom the current screen IN/ OUT in case of zoom enabled screen."}),"\n",(0,o.jsx)(n.li,{children:"Needed parameters: zoomDirection - ZoomDirection.IN or OUT."}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n         new TouchActions(driver).pinchToZoom(ZoomDirection zoomDirection);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"activateappfrombackground",children:"activateAppFromBackground():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to activate an app that has been previously deactivated or sent to the background."}),"\n",(0,o.jsx)(n.li,{children:"Needed parameters: appPackageName - the full name for the app package that you want to activate. for example [com.apple.Preferences] or [io.appium.android.apis]"}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n         new TouchActions(driver).activateAppFromBackground(String appPackageName);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"tap-methods",children:"tap methods:"}),"\n",(0,o.jsx)(n.h3,{id:"tap",children:"tap():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to tap an element once on a touch-enabled screen."}),"\n",(0,o.jsx)(n.li,{children:"Needed parameters: elementLocator - the locator of the webElement under test (By xpath, id, selector, name ...etc)."}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n        new TouchActions(driver).tap(element locator);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"tap-1",children:"tap():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to tap an element once on a touch-enabled screen."}),"\n",(0,o.jsx)(n.li,{children:"Needed parameters: elementReferenceScreenshot - relative path to the reference image from the local object repository."}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n        new TouchActions(driver).tap(String elementReferenceScreenshot);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"doubletap",children:"doubleTap():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to double-taps an element on a touch-enabled screen."}),"\n",(0,o.jsx)(n.li,{children:"Needed parameters: elementLocator - the locator of the webElement under test (By xpath, id, selector, name ...etc)."}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n        new TouchActions(driver).doubleTap(element locator);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"longtap",children:"longTap():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to perform a long-tap on an element to trigger the context menu on a touch-enabled screen."}),"\n",(0,o.jsx)(n.li,{children:"Needed parameters: elementLocator - the locator of the webElement under test (By xpath, id, selector, name ...etc)."}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n        new TouchActions(driver).longTap(element locator);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"swipe-methods",children:"swipe methods:"}),"\n",(0,o.jsx)(n.h3,{id:"1-swipetoelement",children:"1. swipeToElement():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to swipe the sourceElement onto the destinationElement on a touch-enabled screen."}),"\n",(0,o.jsxs)(n.li,{children:["Needed parameters:","\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"sourceElementLocator - the locator of the webElement that needs to be swiped (By xpath, id, selector, name ...etc)."}),"\n",(0,o.jsx)(n.li,{children:"destinationElementLocator - the locator of the webElement that you'll drop the sourceElement on (By xpath, id, selector, name ...etc)."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n         new TouchActions(driver).swipeToElement(element sourceElementLocator, element destinationElementLocator);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-swipebyoffset",children:"2. swipeByOffset():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to swipe an element with the desired x and y offset. Swiping direction is determined by the positive/negative nature of the offset. Swiping destination is determined by the value of the offset."}),"\n",(0,o.jsxs)(n.li,{children:["Needed parameters: elementLocator - the locator of the webElement under test (By xpath, id, selector, name ...etc).","\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:'xOffset - the horizontal offset by which the element should be swiped. positive value is "right" and negative value is "left".'}),"\n",(0,o.jsx)(n.li,{children:'yOffset - the vertical offset by which the element should be swiped. positive value is "down" and negative value is "up".'}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n         new TouchActions(driver).swipeByOffset(element locator, int xoffset, element destinationElementLocatorint yoffset);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-swipeelementintoview",children:"3. swipeElementIntoView():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to scroll the element into the view in case of native mobile elements."}),"\n",(0,o.jsxs)(n.li,{children:["Needed parameters:","\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"targetElementLocator - the locator of the webElement under test (By xpath, id, selector, name ...etc) ."}),"\n",(0,o.jsx)(n.li,{children:"swipeDirection - SwipeDirection.DOWN, UP, RIGHT, or LEFT."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n         new TouchActions(driver).swipeElementIntoView(element locator targetElementLocator, SwipeDirection swipeDirection);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"4-swipeelementintoview",children:"4. swipeElementIntoView():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to scroll element into the view using the new W3C compliant actions for android and ios and AI for image identification."}),"\n",(0,o.jsxs)(n.li,{children:["Needed parameters:","\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"elementReferenceScreenshot - relative path to the reference image from the local object repository."}),"\n",(0,o.jsx)(n.li,{children:"swipeDirection - SwipeDirection.DOWN, UP, RIGHT, or LEFT."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n         new TouchActions(driver).swipeElementIntoView(String elementReferenceScreenshot, SwipeDirection swipeDirection);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"5-swipeelementintoview",children:"5. swipeElementIntoView():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to scroll element into the view using the new W3C compliant actions for android and ios and AI for image identification."}),"\n",(0,o.jsxs)(n.li,{children:["Needed parameters:","\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"scrollableElementLocator - the locator of the container/view/scrollable webElement that the scroll action will be performed inside."}),"\n",(0,o.jsx)(n.li,{children:"elementReferenceScreenshot - relative path to the reference image from the local object repository."}),"\n",(0,o.jsx)(n.li,{children:"swipeDirection - SwipeDirection.DOWN, UP, RIGHT, or LEFT."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n         new TouchActions(driver).swipeElementIntoView(element scrollableElementLocator, String elementReferenceScreenshot, SwipeDirection swipeDirection);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"6-swipeelementintoview",children:"6. swipeElementIntoView():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to scroll element into view using the new W3C compliant actions for android and ios."}),"\n",(0,o.jsxs)(n.li,{children:["Needed parameters:","\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"scrollableElementLocator - the locator of the container/view/scrollable webElement that the scroll action will be performed inside."}),"\n",(0,o.jsx)(n.li,{children:"targetElementLocator - the locator of the webElement that you want to scroll to under test (By xpath, id, selector, name ...etc)."}),"\n",(0,o.jsx)(n.li,{children:"swipeDirection - SwipeDirection.DOWN, UP, RIGHT, or LEFT."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n         new TouchActions(driver).swipeElementIntoView(element scrollableElementLocator, element targetElementLocator, SwipeDirection swipeDirection);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"sendapptobackground-methods",children:"sendAppToBackground methods:"}),"\n",(0,o.jsx)(n.h3,{id:"1-sendapptobackground",children:"1. sendAppToBackground():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to send the currently active app to the background, and return after a certain number of seconds."}),"\n",(0,o.jsx)(n.li,{children:"Needed parameters: secondsToSpendInTheBackground - number of seconds before returning to the app."}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n        new TouchActions(driver).sendAppToBackground(int secondsToSpendInTheBackground);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-sendapptobackground",children:"2. sendAppToBackground():"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We use this method to send the currently active app to the background and leave the app deactivated."}),"\n",(0,o.jsx)(n.li,{children:"This method returns a  self-reference to be used to chain actions."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import com.shaft.gui.element.TouchActions;\npublic class Testing {\n    @Test\n    public void touchActions(){\n        new TouchActions(driver).sendAppToBackground();\n    }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var i=t(6540);const o={},s=i.createContext(o);function c(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);