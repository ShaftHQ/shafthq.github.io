"use strict";(self.webpackChunkshaft_user_guide=self.webpackChunkshaft_user_guide||[]).push([[5359],{5248:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"Keywords/Validations/Nums","title":"Number","description":"We can make many assertions and verifications on numbers by using the Class NumberValidationsBuilder through using the following methods:","source":"@site/docs/Keywords/Validations/Nums.md","sourceDirName":"Keywords/Validations","slug":"/Keywords/Validations/Nums","permalink":"/docs/Keywords/Validations/Nums","draft":false,"unlisted":false,"editUrl":"https://github.com/ShaftHQ/shafthq.github.io/blob/master/docs/Keywords/Validations/Nums.md","tags":[],"version":"current","frontMatter":{"id":"Nums","title":"Number","sidebar_labe":"Number"},"sidebar":"docs","previous":{"title":"Object","permalink":"/docs/Keywords/Validations/Objects"},"next":{"title":"Force Fail","permalink":"/docs/Keywords/Validations/ForceFail"}}');var n=t(4848),i=t(8453);const r={id:"Nums",title:"Number",sidebar_labe:"Number"},l=void 0,o={},u=[{value:"We can make many assertions and verifications on numbers by using the <em>Class NumberValidationsBuilder</em> through using the following methods:",id:"we-can-make-many-assertions-and-verifications-on-numbers-by-using-the-class-numbervalidationsbuilder-through-using-the-following-methods",level:4},{value:"isEqualTo():",id:"isequalto",level:3},{value:"equals():",id:"equals",level:3},{value:"doesNotEqual():",id:"doesnotequal",level:3},{value:"isGreaterThanOrEquals():",id:"isgreaterthanorequals",level:3},{value:"isGreaterThan():",id:"isgreaterthan",level:3},{value:"isLessThanOrEquals():",id:"islessthanorequals",level:3},{value:"isLessThan():",id:"islessthan",level:3}];function d(e){const a={code:"code",em:"em",h3:"h3",h4:"h4",li:"li",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(a.h4,{id:"we-can-make-many-assertions-and-verifications-on-numbers-by-using-the-class-numbervalidationsbuilder-through-using-the-following-methods",children:["We can make many assertions and verifications on numbers by using the ",(0,n.jsx)(a.em,{children:"Class NumberValidationsBuilder"})," through using the following methods:"]}),"\n",(0,n.jsx)(a.h3,{id:"isequalto",children:"isEqualTo():"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"We use this method to check that the actual number is equal to the expected value."}),"\n",(0,n.jsx)(a.li,{children:"Needed parameters: expectedValue - the test data / expected value for the number under test."}),"\n",(0,n.jsx)(a.li,{children:"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation."}),"\n"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isEqualTo((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isEqualTo((Number) expectedValue).perform();\n    }\n}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"equals",children:"equals():"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"This method overrides the default object method equals and is the same as calling isEqualTo((Number) expectedValue).perform();* * So we use this method to check that the actual number is equal to the expected value."}),"\n",(0,n.jsx)(a.li,{children:"Needed parameters: expectedValue - the test data / expected value for the number under test."}),"\n",(0,n.jsx)(a.li,{children:"This method returns a boolean value true if passed and throws AssertionError if failed (return value can be safely ignored)."}),"\n"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).equals((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).equals((Number) expectedValue).perform();\n    }\n}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"doesnotequal",children:"doesNotEqual():"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"We use this method to check that the actual number does not equal the expected value."}),"\n",(0,n.jsx)(a.li,{children:"Needed parameters: expectedValue - the test data / expected value for the number under test."}),"\n",(0,n.jsx)(a.li,{children:"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation."}),"\n"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).doesNotEqual((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).doesNotEqual((Number) expectedValue).perform();\n    }\n}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"isgreaterthanorequals",children:"isGreaterThanOrEquals():"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"We use this method to check that the actual number is greater than or equal to the expected value."}),"\n",(0,n.jsx)(a.li,{children:"Needed parameters: expectedValue - the test data / expected value for the number under test."}),"\n",(0,n.jsx)(a.li,{children:"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation."}),"\n"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isGreaterThanOrEquals((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isGreaterThanOrEquals((Number) expectedValue).perform();\n    }\n}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"isgreaterthan",children:"isGreaterThan():"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"We use this method to check that the actual number is greater than the expected value."}),"\n",(0,n.jsx)(a.li,{children:"Needed parameters: expectedValue - the test data / expected value for the number under test."}),"\n",(0,n.jsx)(a.li,{children:"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation."}),"\n"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isGreaterThan((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isGreaterThan((Number) expectedValue).perform();\n    }\n}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"islessthanorequals",children:"isLessThanOrEquals():"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"We use this method to check that the actual number is less than or equal to the expected value."}),"\n",(0,n.jsx)(a.li,{children:"Needed parameters: expectedValue - the test data / expected value for the number under test."}),"\n",(0,n.jsx)(a.li,{children:"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation."}),"\n"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isLessThanOrEquals((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isLessThanOrEquals((Number) expectedValue).perform();\n    }\n}\n"})}),"\n",(0,n.jsx)(a.h3,{id:"islessthan",children:"isLessThan():"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"We use this method to check that the actual number is less than the expected value."}),"\n",(0,n.jsx)(a.li,{children:"expectedValue - the test data / expected value for the number under test."}),"\n",(0,n.jsx)(a.li,{children:"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation."}),"\n"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isLessThan((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isLessThan((Number) expectedValue).perform();\n    }\n}\n"})})]})}function c(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>l});var s=t(6540);const n={},i=s.createContext(n);function r(e){const a=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(i.Provider,{value:a},e.children)}}}]);